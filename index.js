require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");
const axios = require("axios");

// Bot tokeni
const token = process.env.BOT_TOKEN;
if (!token || token === "YOUR_BOT_TOKEN_HERE") {
  console.error(
    "√ùal≈ày≈ülyk: Bot tokeni berilmedi √Ωa-da n√§dogry. .env fa√Ωlynda BOT_TOKEN √º√Ωtge≈ü√Ω√§nini d√ºz√º≈à."
  );
  process.exit(1);
}

// RapidAPI key
const rapidApiKey = process.env.RAPIDAPI_KEY;
if (!rapidApiKey) {
  console.error(
    "√ùal≈ày≈ülyk: RapidAPI key berilmedi. .env fa√Ωlynda RAPIDAPI_KEY √º√Ωtge≈ü√Ω√§nini d√ºz√º≈à."
  );
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

// JSON maglumat bazasy
let db = {
  channels: ["@cobra_servers", "@turkmen_shadowsocks"],
  folderChannels: ["@shadow_community_servers"],
  folderInviteLink: "https://t.me/addlist/IYQiFKJc9cQwMGZi",
  currentVpnCode: "",
  admins: [6179312865], // √ñz admin ID-≈àizi go≈üu≈à
  users: [],
  vpnDistributedCount: 0,
  postedMessageIds: {},
};

// Loglama funksi√Ωalary
const logInfo = (message) => {
  console.log(
    `${new Date().toLocaleString("en-US", {
      timeZone: "Asia/Seoul",
    })} - ${message}`
  );
};

const logError = (message, error) => {
  console.error(`${message}: ${error.message}\nStack: ${error.stack}`);
};

// JSON bilen i≈ülemek √º√ßin funksi√Ωalar
const saveDB = () => {
  try {
    fs.writeFileSync("db.json", JSON.stringify(db, null, 2));
    logInfo("db.json √Ωazuw √ºst√ºnlikli √Ωerine √Ωetirildi.");
  } catch (error) {
    logError("db.json √Ωazuwda √Ωal≈ày≈ülyk", error);
    throw new Error("Maglumat bazasyny √Ωazmak ba≈üarmady.");
  }
};

const loadDB = () => {
  try {
    if (fs.existsSync("db.json")) {
      const data = JSON.parse(fs.readFileSync("db.json"));
      if (
        !data.channels ||
        !data.folderChannels ||
        !data.admins ||
        !data.users
      ) {
        throw new Error("db.json fa√Ωlynda n√§dogry format.");
      }
      logInfo("db.json √Ω√ºklenildi.");
      return data;
    } else {
      logInfo("db.json fa√Ωly √Ωok, t√§ze fa√Ωl d√∂redil√Ω√§r.");
      saveDB();
      return db;
    }
  } catch (error) {
    logError("db.json √Ω√ºklemede √Ωal≈ày≈ülyk", error);
    return db;
  }
};

// Maglumat bazasyny √Ω√ºklemek
db = loadDB();

// Telegram API √ß√§klendirmelerini dolandyrmak
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

const apiRequestWithRetry = async (fn, retries = 5, delayMs = 1000) => {
  for (let i = 0; i < retries; i++) {
    try {
      return await fn();
    } catch (error) {
      if (error.code === 429 || error.message.includes("404 Not Found")) {
        logInfo(
          `API √Ωal≈ày≈ülygy (${error.code || "404"}): ${
            i + 1
          }-nji synany≈üyk, gara≈üma: ${delayMs}ms`
        );
        await delay(delayMs);
        delayMs *= 2;
      } else {
        throw error;
      }
    }
  }
  throw new Error("API √ß√§klendirmesi: Synany≈üyklar gutardy.");
};

// TikTok wideosyny √Ω√ºklemek funksi√Ωasy
async function downloadTikTokVideo(url, chatId) {
  try {
    // Validate URL
    if (!url.includes("tiktok.com")) {
      await bot.sendMessage(
        chatId,
        "N√§dip TikTok ssylkasy. Dogry ssylka √Ωollan (mysal: https://www.tiktok.com/@username/video/123456789) we t√§zeden synan≈ü."
      );
      return false;
    }

    await bot.sendMessage(chatId, "Wideo √Ω√ºklen√Ω√§r, gara≈üy≈à...");
    await delay(1000); // Prevent RapidAPI rate limits

    // RapidAPI TikTok Downloader
    const response = await axios.get(
      `https://tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com/vid/index?url=${encodeURIComponent(
        url
      )}`,
      {
        headers: {
          "X-RapidAPI-Key": rapidApiKey,
          "X-RapidAPI-Host":
            "tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com",
        },
      }
    );
    logInfo(`RapidAPI response: ${JSON.stringify(response.data, null, 2)}`);

    if (response.data && response.data.video && response.data.video[0]) {
      const videoUrl = response.data.video[0];
      await bot.sendVideo(chatId, videoUrl, {
        caption: "Suwsyz TikTok wideosy!",
      });
      logInfo(`TikTok wideo √ºst√ºnlikli ugradyldy: ${chatId}`);
      return true;
    } else {
      throw new Error("RapidAPI: Wideony≈à ssylkasy gelmedi.");
    }
  } catch (error) {
    logError(`TikTok wideosyny √Ω√ºklemekde √Ωal≈ày≈ülyk ${url}`, error);
    let errorMessage = "TikTok wideosyny √Ω√ºklemekde √Ωal≈ày≈ülyk √Ω√ºze √ßykdy.";
    if (error.response) {
      if (error.response.status === 429) {
        errorMessage = "API √ß√§klendirmesi: K√∂p synany≈üyk. So≈àra synany≈üy≈à.";
      } else if (error.response.status === 403) {
        errorMessage = "Video √Ωa-da API √ß√§klendirilen. Ba≈üga ssylka synan≈üy≈à.";
      } else {
        errorMessage = `API √Ωal≈ày≈ülygy: ${error.response.status}. Dogry we umumy TikTok ssylkasy √Ωollan √Ωa-da so≈àra synan≈ü.`;
      }
    } else if (error.message.includes("Network Error")) {
      errorMessage = "Internet birikmesinde √Ωal≈ày≈ülyk. Birikm√§≈àizi barla≈à.";
    }
    await bot.sendMessage(chatId, errorMessage);
    return false;
  }
}

// Admin statusyny barlamak
const isAdmin = (userId) => {
  const adminStatus = db.admins.includes(userId);
  if (!adminStatus) {
    logInfo(
      `Admin bolmadyk ulanyjy ${userId} admin paneline girm√§ge synany≈üdy.`
    );
  }
  return adminStatus;
};

// Ulanyjyny≈à agzalygy barlamak
async function checkMembership(chatId) {
  const requiredChannels = [...db.channels, ...db.folderChannels];
  const notMemberChannels = [];

  for (const channel of requiredChannels) {
    try {
      if (!channel.startsWith("@")) {
        logInfo(`N√§dip kanal: ${channel}`);
        notMemberChannels.push(channel);
        continue;
      }
      const chat = await apiRequestWithRetry(() => bot.getChat(channel));
      const status = await apiRequestWithRetry(() =>
        bot.getChatMember(chat.id, chatId)
      );
      if (status.status === "left" || status.status === "kicked") {
        notMemberChannels.push(channel);
      }
      await delay(500);
    } catch (error) {
      logError(`Kanalda ${channel} √º√ßin ${chatId} barlamada √Ωal≈ày≈ülyk`, error);
      notMemberChannels.push(channel);
    }
  }

  return { isMember: notMemberChannels.length === 0, notMemberChannels };
}

// Kanallary we papkany g√∂rkezmek
function showChannels(chatId, notMemberChannels = []) {
  const nonFolderChannels = notMemberChannels.filter((c) =>
    db.channels.includes(c)
  );
  const folderNotMemberChannels = notMemberChannels.filter((c) =>
    db.folderChannels.includes(c)
  );

  let message = "VPN kody almak √º√ßin a≈üakdaky kanallara agza bolu≈à:\n";
  if (notMemberChannels.length > 0) {
    message =
      "Siz a≈üakdaky kanallara doly agza bolmady≈àyz. Kanallara agza bolu≈à we t√§zeden synan≈üy≈à:\n";
    if (nonFolderChannels.length > 0) {
      message +=
        "\nKanallar:\n" + nonFolderChannels.map((c) => `${c}`).join("\n");
    }
    if (folderNotMemberChannels.length > 0) {
      message +=
        "\nAddlist'daky Kanallar:\n" +
        folderNotMemberChannels.map((c) => `${c}`).join("\n");
    }
  }

  const keyboard = {
    inline_keyboard: [
      ...(nonFolderChannels.length > 0
        ? nonFolderChannels.map((channel) => [
            { text: `üì¢ Kanal`, url: `https://t.me/${channel.slice(1)}` },
          ])
        : db.channels.map((channel) => [
            { text: `üì¢ Kanal`, url: `https://t.me/${channel.slice(1)}` },
          ])),
      [{ text: `üì¢ Premium Folder`, url: db.folderInviteLink }],
      [{ text: `‚úÖ Agza Boldum`, callback_data: "check_membership" }],
    ],
  };

  bot
    .sendMessage(chatId, message, { reply_markup: keyboard })
    .catch((error) => {
      logError(`Habary ugradyp bolmadi ${chatId}`, error);
    });
}

// Botu≈à √∂z √ßakylyk baglany≈üygyny go≈üulan kanallara post etmek
async function postBotInviteToAdminChannels() {
  const allChannels = [...db.channels, ...db.folderChannels];
  let successCount = 0;
  let failCount = 0;
  let botUsername;

  try {
    const botInfo = await apiRequestWithRetry(() => bot.getMe());
    botUsername = botInfo.username;
    logInfo(`Bot username: ${botUsername}, Bot ID: ${botInfo.id}`);
  } catch (error) {
    logError("Bot username alynmady", error);
    return { successCount: 0, failCount: 0 };
  }

  // Check if sponsor_bot.png exists
  const imagePath = "./img/sponsor_bot.png";
  const imageExists = fs.existsSync(imagePath);

  for (const channel of allChannels) {
    try {
      if (!channel.startsWith("@")) {
        logInfo(`N√§dip kanal: ${channel}`);
        failCount++;
        continue;
      }
      const chat = await apiRequestWithRetry(() => bot.getChat(channel));
      const caption =
        "‚ö°Ô∏è ùò†ùò¢ùò≥ùò∫ùò¢ùòØ ùòùùòóùòï ùòéùò¶ùò≥ùò¶ùò¨ùòÆùò™\n\nüìÖ ùòâùòñùòõ'ùò¢ 3 ùòéùò∂ùòØùò≠ùò∂ùò¨ ùòùùòóùòï ùòíùò∞ùò• ùòéùò∞ùò∫ùò∂ùò≠ùò•ùò∫\n\nüì± ùòéùòõùòö - ùòõùò¶ùò≠ùò¶ùò§ùò∞ùòÆ - 3G - 4G\n\n‚ö°Ô∏è ùòõùò™ùò¨ùòõùò∞ùò¨ | üî• ùò†ùò∞ùò∂ùòõùò∂ùò£ùò¶ | ‚ö°Ô∏è ùò™ùòØùò¥ùòµùò¢ùò®ùò≥ùò¢ùòÆ | üî• ùòõùò¶ùò≠ùò¶ùò®ùò≥ùò¢ùòÆ\n\n ‚úÖ ùòùùòóùòï'ùò∫ùòØ ùòíùò¶ùò∫ùò±ùò™ùòØùò™ ùòäùò∫ùò¨ùò¢ùò≥ùò∫ùòØ";
      const replyMarkup = {
        inline_keyboard: [
          [
            {
              text: "ùòùùòóùòï ùòàùò≠ùòÆùò¢ùò¨ ‚úÖ",
              url: `https://t.me/${botUsername}?start=from_channel`,
            },
          ],
        ],
      };

      let sentMessage;
      if (imageExists) {
        sentMessage = await apiRequestWithRetry(() =>
          bot.sendPhoto(chat.id, imagePath, {
            caption,
            parse_mode: "HTML",
            reply_markup: replyMarkup,
          })
        );
      } else {
        logInfo(`sponsor_bot.png √Ωok, tekst habar ugradyl√Ωar: ${channel}`);
        sentMessage = await apiRequestWithRetry(() =>
          bot.sendMessage(chat.id, caption, {
            parse_mode: "HTML",
            reply_markup: replyMarkup,
          })
        );
      }

      db.postedMessageIds[chat.id] = db.postedMessageIds[chat.id] || [];
      db.postedMessageIds[chat.id].push(sentMessage.message_id);
      saveDB();
      successCount++;
      logInfo(
        `Post ${channel} kanalyna ugradyldy, Message ID: ${sentMessage.message_id}`
      );
      await delay(1000);
    } catch (error) {
      logError(`Bot √ßakylyk ugratmakda √Ωal≈ày≈ülyk ${channel}`, error);
      failCount++;
    }
  }

  logInfo(
    `Bot √ßakylygy ugradyldy: √úst√ºnlikli: ${successCount}, √ùal≈ày≈ülyklar: ${failCount}`
  );
  return { successCount, failCount };
}

// Admini≈à √Ω√∂rite habaryny go≈üulan kanallara ugratmak
async function postChannelMessage(messageText) {
  const allChannels = [...db.channels, ...db.folderChannels];
  let successCount = 0;
  let failCount = 0;

  for (const channel of allChannels) {
    try {
      if (!channel.startsWith("@")) {
        logInfo(`N√§dip kanal: ${channel}`);
        failCount++;
        continue;
      }
      const chat = await apiRequestWithRetry(() => bot.getChat(channel));
      const sentMessage = await apiRequestWithRetry(() =>
        bot.sendMessage(chat.id, messageText, { parse_mode: "HTML" })
      );
      db.postedMessageIds[chat.id] = db.postedMessageIds[chat.id] || [];
      db.postedMessageIds[chat.id].push(sentMessage.message_id);
      saveDB();
      successCount++;
      logInfo(
        `Habar ${channel} kanalyna ugradyldy, Message ID: ${sentMessage.message_id}`
      );
      await delay(1000);
    } catch (error) {
      logError(`Habar ugratmakda √Ωal≈ày≈ülyk ${channel}`, error);
      failCount++;
    }
  }

  logInfo(
    `Kanala habar ugradyldy: √úst√ºnlikli: ${successCount}, √ùal≈ày≈ülyklar: ${failCount}`
  );
  return { successCount, failCount };
}

// Botu≈à ugradylan habarlaryny pozmak
async function deletePostedMessages() {
  const allChannels = [...db.channels, ...db.folderChannels];
  let successCount = 0;
  let failCount = 0;

  for (const channel of allChannels) {
    try {
      if (!channel.startsWith("@")) {
        logInfo(`N√§dip kanal: ${channel}`);
        failCount++;
        continue;
      }
      const chat = await apiRequestWithRetry(() => bot.getChat(channel));
      const messageIds = db.postedMessageIds[chat.id] || [];
      for (const messageId of messageIds) {
        try {
          await apiRequestWithRetry(() =>
            bot.deleteMessage(chat.id, messageId)
          );
          successCount++;
          logInfo(
            `Ugradylan habarlar pozuldy: ${channel}, Message ID: ${messageId}`
          );
          await delay(500);
        } catch (error) {
          logError(
            `Habar pozmakda √Ωal≈ày≈ülyk ${channel}, Message ID: ${messageId}`,
            error
          );
          failCount++;
        }
      }
      db.postedMessageIds[chat.id] = [];
      saveDB();
    } catch (error) {
      logError(`Kanaly barlamada √Ωal≈ày≈ülyk ${channel}`, error);
      failCount++;
    }
  }

  logInfo(
    `Pozulmali Habarlar: √úst√ºnlikli: ${successCount}, √ùal≈ày≈ülyklar: ${failCount}`
  );
  return { successCount, failCount };
}

// /start komandasy
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    if (!db.users.includes(chatId)) {
      db.users.push(chatId);
      saveDB();
      logInfo(`T√§ze ulanyjy go≈üuldy: ${chatId}`);
    }
    const userKeyboard = {
      inline_keyboard: [
        [{ text: "üîí Mugt VPN almak", callback_data: "check_membership" }],
        [
          {
            text: "üìπ TikTok Video √ù√ºklemek",
            callback_data: "download_tiktok",
          },
        ],
        [{ text: "üíé Premium Hyzmatlar", callback_data: "premium_services" }],
        [
          { text: "üíª Dev info", callback_data: "dev_info" },
          { text: "üìä Statistika", callback_data: "statistika" },
        ],
        ...(isAdmin(msg.from.id)
          ? [[{ text: "‚öôÔ∏è Admin paneli", callback_data: "admin_panel" }]]
          : []),
      ],
    };
    await bot.sendMessage(chatId, "User paneline ho≈ü geldi≈àiz!", {
      reply_markup: userKeyboard,
    });
  } catch (error) {
    logError("/start komandasynda √Ωal≈ày≈ülyk", error);
    await bot
      .sendMessage(chatId, "√ùal≈ày≈ülyk √Ω√ºze √ßykdy. So≈àra synany≈üy≈à.")
      .catch((err) => {
        logError("√ùal≈ày≈ülyk habary ugratmakda √Ωal≈ày≈ülyk", err);
      });
  }
});

// /admin komandasy
bot.onText(/\/admin/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    if (isAdmin(msg.from.id)) {
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: "‚öôÔ∏è Normal Admin Panel",
              callback_data: "normal_admin_panel",
            },
          ],
          [
            {
              text: "üîß Advanced Admin Panel",
              callback_data: "advanced_admin_panel",
            },
          ],
        ],
      };
      await bot.sendMessage(chatId, "‚öôÔ∏è Admin paneline ho≈ü geldi≈àiz!", {
        reply_markup: keyboard,
      });
    } else {
      await bot.sendMessage(chatId, "Siz administrator d√§l.");
    }
  } catch (error) {
    logError("/admin komandasynda √Ωal≈ày≈ülyk", error);
    await bot.sendMessage(chatId, "√ùal≈ày≈ülyk √Ω√ºze √ßykdy.").catch((err) => {
      logError("√ùal≈ày≈ülyk habary ugratmakda √Ωal≈ày≈ülyk", err);
    });
  }
});

// Callback soraglary
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const userId = query.from.id;

  try {
    if (data === "check_membership") {
      const { isMember, notMemberChannels } = await checkMembership(chatId);
      if (isMember) {
        if (db.currentVpnCode) {
          await bot.sendMessage(
            chatId,
            `üîí VPN kody: \n\n<code>${db.currentVpnCode}</code>`,
            {
              parse_mode: "HTML",
            }
          );
          db.vpnDistributedCount++;
          saveDB();
          logInfo(`VPN kody ugradyldy: ${chatId}`);
        } else {
          await bot.sendMessage(chatId, "H√§zirki wagtda VPN kody √Ωok.");
        }
      } else {
        showChannels(chatId, notMemberChannels);
      }
    }

    if (data === "download_tiktok") {
      const { isMember, notMemberChannels } = await checkMembership(chatId);
      if (isMember) {
        await bot.sendMessage(chatId, "TikTok wideosyny≈à ssylkasyny √Ωollan:");
        bot.once("message", async (msg) => {
          const videoUrl = msg.text;
          await downloadTikTokVideo(videoUrl, chatId);
        });
      } else {
        showChannels(chatId, notMemberChannels);
      }
    }

    const adminKeyboard = {
      inline_keyboard: [
        [{ text: "üìû Admin", url: "https://t.me/batyrovv0991" }],
      ],
    };
    if (data === "premium_services") {
      await bot.sendMessage(
        chatId,
        `üíé Satyl√Ωan VPN'lar:\n\nüîí Happ VPN\nüîí V2BOX\nüîí NPV Tunnel\n\nüí∏ Bahalary:\n\nüí∏ A√Ωlyk - 100 TMT\nüí∏ Hepdelik - 35 TMT\n\nüì± Enjamlar:\n\nüì± IOS/Android/PC\n\nüìû VPN Satyn Almak √ú√ßin Admin'a √ù√ºz Tutu≈à`,
        { reply_markup: adminKeyboard }
      );
    }

    if (data === "dev_info") {
      await bot.sendMessage(
        chatId,
        `üíª Dev Info:\n\nName: Ahmed\nContact: @batyrovv0991\nJob: Backend Developer`
      );
    }

    if (data === "statistika") {
      try {
        const userCount = db.users.length;
        const vpnCount = db.vpnDistributedCount;
        const activeChannels = db.channels.length + db.folderChannels.length;
        await bot.sendMessage(
          chatId,
          `üìä Statistika:\n\n` +
            `üë§ Jemi Ulanyjylary≈à Sany: ${userCount}\n` +
            `üîí Jemi Pa√Ωlanan VPN Sany: ${vpnCount}\n` +
            `üì¢ Aktiw kanallar: ${activeChannels}`
        );
        logInfo(`Statistika g√∂rkezildi: ${chatId}`);
      } catch (error) {
        logError("Statistika g√∂rkezmekde √Ωal≈ày≈ülyk", error);
        await bot.sendMessage(
          chatId,
          "Statistikany g√∂rkezmekde √Ωal≈ày≈ülyk √Ω√ºze √ßykdy."
        );
      }
    }

    if (data === "admin_panel" && isAdmin(userId)) {
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: "‚öôÔ∏è Normal Admin Panel",
              callback_data: "normal_admin_panel",
            },
          ],
          [
            {
              text: "üîß Advanced Admin Panel",
              callback_data: "advanced_admin_panel",
            },
          ],
        ],
      };
      await bot.sendMessage(chatId, "‚öôÔ∏è Admin paneline ho≈ü geldi≈àiz!", {
        reply_markup: keyboard,
      });
    } else if (data === "admin_panel") {
      await bot.sendMessage(chatId, "Siz administrator d√§l.");
    }

    if (data === "normal_admin_panel" && isAdmin(userId)) {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üîí VPN kody √ßaly≈ümak", callback_data: "replace_vpn" }],
          [
            { text: "‚ûï Kanal go≈ümak", callback_data: "add_channel" },
            { text: "‚ûñ Kanal a√Ωyrmak", callback_data: "remove_channel" },
          ],
          [
            {
              text: "‚ûï Addlist'a kanal go≈ümak",
              callback_data: "add_folder_channel",
            },
            {
              text: "‚ûñ Addlist kanalyny a√Ωyrmak",
              callback_data: "remove_folder_channel",
            },
          ],
          [
            {
              text: "üîó Addlist Invite Link √áalsmak",
              callback_data: "replace_folder_link",
            },
          ],
        ],
      };
      await bot.sendMessage(chatId, "‚öôÔ∏è Normal Admin Paneli:", {
        reply_markup: keyboard,
      });
    } else if (data === "normal_admin_panel") {
      await bot.sendMessage(chatId, "Siz administrator d√§l.");
    }

    if (data === "advanced_admin_panel" && isAdmin(userId)) {
      const keyboard = {
        inline_keyboard: [
          [
            { text: "üì© Admin Habary", callback_data: "admin_message" },
            { text: "üåü VPN reklamasy", callback_data: "admin_ads" },
          ],
          [{ text: "ü§ñ Bot Post", callback_data: "post_bot_invite" }],
          [{ text: "üì¢ Channel Message", callback_data: "channel_message" }],
          [{ text: "üóëÔ∏è Delete Posts", callback_data: "delete_posts" }],
        ],
      };
      await bot.sendMessage(chatId, "üîß Advanced Admin Paneli:", {
        reply_markup: keyboard,
      });
    } else if (data === "advanced_admin_panel") {
      await bot.sendMessage(chatId, "Siz administrator d√§l.");
    }

    if (data === "post_bot_invite" && isAdmin(userId)) {
      const { successCount, failCount } = await postBotInviteToAdminChannels();
      await bot.sendMessage(
        chatId,
        `ü§ñ Bot √ßakylyk habary ugradyldy:\n√úst√ºnlikli: ${successCount}\n√ùal≈ày≈ülyklar: ${failCount}`
      );
    }

    if (data === "channel_message" && isAdmin(userId)) {
      await bot.sendMessage(
        chatId,
        "Kanallara ugratmak √º√ßin √Ω√∂rite habary≈àyzy √Ωazy≈à:"
      );
      bot.once("message", async (msg) => {
        const messageText = msg.text;
        const { successCount, failCount } = await postChannelMessage(
          messageText
        );
        await bot.sendMessage(
          chatId,
          `üì¢ Channel habary ugradyldy:\n√úst√ºnlikli: ${successCount}\n√ùal≈ày≈ülyklar: ${failCount}`
        );
      });
    }

    if (data === "delete_posts" && isAdmin(userId)) {
      const { successCount, failCount } = await deletePostedMessages();
      await bot.sendMessage(
        chatId,
        `üóëÔ∏è Habarlar pozuldy:\n√úst√ºnlikli: ${successCount}\n√ùal≈ày≈ülyklar: ${failCount}`
      );
    }

    if (data === "replace_vpn" && isAdmin(userId)) {
      await bot.sendMessage(chatId, "T√§ze VPN kodyny girizi≈à:");
      bot.once("message", (msg) => {
        db.currentVpnCode = msg.text;
        saveDB();
        bot.sendMessage(chatId, "üîí VPN kody √ßal≈üyldy.").catch((error) => {
          logError("VPN kody √ßal≈üyly≈ü habary ugratmakda √Ωal≈ày≈ülyk", error);
        });
      });
    }

    if (data === "add_channel" && isAdmin(userId)) {
      await bot.sendMessage(
        chatId,
        "Kanaly≈à adyny girizi≈à (mysal √º√ßin, @ChannelName):"
      );
      bot.once("message", (msg) => {
        const channel = msg.text;
        if (!channel.startsWith("@")) {
          bot
            .sendMessage(chatId, "Kanal ady @ bilan ba≈ülamaly.")
            .catch((error) => {
              logError("Kanal go≈üul√Ωan habar ugratmakda √Ωal≈ày≈ülyk", error);
            });
          return;
        }
        db.channels.push(channel);
        saveDB();
        bot.sendMessage(chatId, "‚ûï Kanal go≈üuldy.").catch((error) => {
          logError("Kanal go≈üuldy habary ugratmakda √Ωal≈ày≈ülyk", error);
        });
      });
    }

    if (data.startsWith("remove_channel_") && isAdmin(userId)) {
      const channel = data.replace("remove_channel_", "");
      if (db.channels.includes(channel)) {
        db.channels = db.channels.filter((c) => c !== channel);
        saveDB();
        await bot.sendMessage(chatId, `‚ûñ ${channel} a√Ωyryldy.`);
      } else {
        await bot.sendMessage(
          chatId,
          `${channel} a√Ωyrylmady, seb√§bi maglumat bazasynda √Ωok.`
        );
      }
    }

    if (data === "add_folder_channel" && isAdmin(userId)) {
      await bot.sendMessage(chatId, "Papka √º√ßin kanaly≈à adyny girizi≈à:");
      bot.once("message", (msg) => {
        const channel = msg.text;
        if (!channel.startsWith("@")) {
          bot
            .sendMessage(chatId, "Kanal ady @ bilan ba≈ülamaly.")
            .catch((error) => {
              logError(
                "Papka kanaly go≈üul√Ωan habar ugratmakda √Ωal≈ày≈ülyk",
                error
              );
            });
          return;
        }
        db.folderChannels.push(channel);
        saveDB();
        bot.sendMessage(chatId, "‚ûï Addlist kanaly go≈üuldy.").catch((error) => {
          logError("Papka kanaly go≈üuldy habary ugratmakda √Ωal≈ày≈ülyk", error);
        });
      });
    }

    if (data.startsWith("remove_folder_channel_") && isAdmin(userId)) {
      const channel = data.replace("remove_folder_channel_", "");
      if (db.folderChannels.includes(channel)) {
        db.folderChannels = db.folderChannels.filter((c) => c !== channel);
        saveDB();
        await bot.sendMessage(chatId, `‚ûñ ${channel} addlist'dan a√Ωyryldy.`);
      } else {
        await bot.sendMessage(
          chatId,
          `${channel} a√Ωyrylmady, seb√§bi maglumat bazasynda √Ωok.`
        );
      }
    }

    if (data === "replace_folder_link" && isAdmin(userId)) {
      await bot.sendMessage(
        chatId,
        "T√§ze papka √ßakylyk baglany≈üygyny girizi≈à:"
      );
      bot.once("message", (msg) => {
        db.folderInviteLink = msg.text;
        saveDB();
        bot
          .sendMessage(chatId, "üîó Papka √ßakylyk baglany≈üygy √ßal≈üyldy.")
          .catch((error) => {
            logError("Papka linki √ßal≈üyly≈ü habary ugratmakda √Ωal≈ày≈ülyk", error);
          });
      });
    }

    if (data === "admin_message" && isAdmin(userId)) {
      await bot.sendMessage(chatId, "Admin habaryny girizi≈à:");
      bot.once("message", async (msg) => {
        const messageText = msg.text;
        let successCount = 0;
        let failCount = 0;

        for (const userId of db.users) {
          try {
            await apiRequestWithRetry(() =>
              bot.sendMessage(userId, `üì© ${messageText}`)
            );
            successCount++;
            await delay(50);
          } catch (error) {
            logError(`Admin habary ugratmakda √Ωal≈ày≈ülyk ${userId}`, error);
            failCount++;
          }
        }

        await bot.sendMessage(
          chatId,
          `üì© Admin habary √§hli ulanyjylara ugradyldy:\n√úst√ºnlikli: ${successCount}\n√ùal≈ày≈ülyklar: ${failCount}`
        );
      });
    }

    if (data === "admin_ads" && isAdmin(userId)) {
      await bot.sendMessage(chatId, "VPN reklamasyny girizi≈à:");
      bot.once("message", async (msg) => {
        const adText = msg.text;
        let successCount = 0;
        let failCount = 0;

        for (const userId of db.users) {
          try {
            await apiRequestWithRetry(() =>
              bot.sendMessage(userId, `üåü VPN reklamasy\n${adText}`)
            );
            successCount++;
            await delay(50);
          } catch (error) {
            logError(`Reklama ugratmakda √Ωal≈ày≈ülyk ${userId}`, error);
            failCount++;
          }
        }

        await bot.sendMessage(
          chatId,
          `üåü Reklama √§hli ulanyjylara ugradyldy:\n√úst√ºnlikli: ${successCount}\n√ùal≈ày≈ülyklar: ${failCount}`
        );
      });
    }

    if (data === "remove_channel" && isAdmin(userId)) {
      if (db.channels.length === 0) {
        await bot.sendMessage(chatId, "A√Ωyrmak √º√ßin kanal √Ωok.");
        return;
      }
      const keyboard = {
        inline_keyboard: db.channels.map((channel) => [
          { text: `‚ûñ ${channel}`, callback_data: `remove_channel_${channel}` },
        ]),
      };
      await bot.sendMessage(chatId, "Ha√Ωsy kanaly a√Ωyrmak√ßy:", {
        reply_markup: keyboard,
      });
    }

    if (data === "remove_folder_channel" && isAdmin(userId)) {
      if (db.folderChannels.length === 0) {
        await bot.sendMessage(chatId, "Addlist'da a√Ωyrmak √º√ßin kanal √Ωok.");
        return;
      }
      const keyboard = {
        inline_keyboard: db.folderChannels.map((channel) => [
          {
            text: `‚ûñ ${channel}`,
            callback_data: `remove_folder_channel_${channel}`,
          },
        ]),
      };
      await bot.sendMessage(chatId, "Addlist'dan ha√Ωsy kanaly a√Ωyrmak√ßy:", {
        reply_markup: keyboard,
      });
    }
  } catch (error) {
    logError("Callback soragynda √Ωal≈ày≈ülyk", error);
    await bot
      .sendMessage(chatId, "√ùal≈ày≈ülyk √Ω√ºze √ßykdy. So≈àra synany≈üy≈à.")
      .catch((err) => {
        logError("√ùal≈ày≈ülyk habary ugratmakda √Ωal≈ày≈ülyk", err);
      });
  }
});

// Polling √Ωal≈ày≈ülyklary
bot.on("polling_error", (error) => {
  logError("Polling √Ωal≈ày≈ülygy", error);
  if (error.message.includes("404 Not Found")) {
    console.error(
      "√ùal≈ày≈ü bot tokeni √Ωa-da Telegram API-a √Ωetip bolmady. .env fa√Ωlynda BOT_TOKEN barla≈à √Ωa-da internet birikmesini barla≈à."
    );
  }
});

// Boty≈à i≈üledigini barlamak
bot
  .getMe()
  .then((botInfo) => {
    logInfo(`Bot i≈üledi: @${botInfo.username} (ID: ${botInfo.id})`);
  })
  .catch((error) => {
    logError("Bot barlamasynda √Ωal≈ày≈ülyk", error);
    if (error.message.includes("404 Not Found")) {
      console.error("N√§dip bot tokeni. @BotFather bilen t√§ze token aly≈à.");
      process.exit(1);
    }
  });

logInfo("Bot i≈üledil√Ω√§r...");
